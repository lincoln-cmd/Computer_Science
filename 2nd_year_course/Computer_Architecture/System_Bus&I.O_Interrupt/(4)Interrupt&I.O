<인터럽트를 이용한 I/O>



인터럽트-구동 I/O
  - 인터럽트-구동 I/O (interrupt-driven I/O): 인터럽트 매커니즘을 이용하여 CPU와 I/O 장치간의 상호작용이 처리되는 방식
  - 인터럽트-구동 I/O의 동작 순서
      1) CPU가 I/O 제어기에게 명령을 보냄. 그 다음 CPU는 다른 작업 수행
      2) 제어기는 I/O 명령을 이용하여 I/O 장치 제어
      3) I/O 장치가 명령 수행을 완료하면, 제어기는 CPU로 인터럽트 신호 보냄
      4) CPU는 인터럽트 신호를 받는 즉시 원래의 프로그램으로 돌아와서 다음 작업 계속



CPU가 프린터로 데이터를 출력하는 과정
  1) CPU가 데이터와 프린트 명령을 프린터 제어기로 보냄
  2) 그 데이터의 프린트가 종료되면, 프린터 제어기는 CPU로 인터럽트 요구 신호를 보냄 (인터럽트를 보내기 전까지 CPU는 다른 작업을 함)
  3) 만약 프린트할 내용이 남아 있다면, CPU는 다음에 프린트할 데이터를 준비하여 1번부터 반복



인터럽트-구동 I/O의 구현
  - 다중 인터럽트(multiple interrupt) 방식
  - 데이지-체인(daisy-chain) 방식
  - 소프트웨어 폴링(software polling) 방식



다중 인터럽트 방식
  - 각 I/O 제어기와 CPU 사이에 별도의 인터럽트 요구(INTR) 신호 선과 인터럽트 확인(INTA) 신호 선이 한 개씩 존재

  - 장점: CPU가 인터럽트를 요구한 장치를 쉽게 찾아낼 수 있음
  - 단점: 하드웨어가 복잡하고, 접속 가능한 I/O 장치들의 수가 CPU의 인터럽트 요구 입력 핀의 수에 의해 제한

  - 인터럽트 확인(INTA) 신호: CPU가 I/O 장치로부터의 인터럽트 요구를 인식했다는 것을 알려주는 신호



다중 인터럽트 예시 (I/O 제어기2가 인터럽트를 요구하는 겨웅 동작 순서)
  1) I/O 제어기2가 INTR2 신호를 세트
  2) CPU는 INTA2신호를 세트, 제어기에게 인터럽트 요구 인식 알림. 인터럽트를 위한 서비스 시작
  3) I/O 제어기2는 INTR2 신호를 해제(0으로 리셋)
  4) CPU도 INTA2 신호를 해제



데이지-체인 방식
  - 모든 I/O 제어기들은 한 개의 INTR 선을 공유
  - CPU로부터 발생되는 INTA 출력 선을 I/O 제어기들에 직렬로 연결
  - 인터럽트를 요구한 I/O 장치는 데이터 버스를 통해 자신의 식별 번호(ID)를 CPU로 전송
  - 인터럽트 벡터(interrupt vector): 인터럽트를 요구한 I/O 장치의 식별 번호(ID)로서, 해당 장치를 위한 인터럽트 처리 루틴의 시작 주소를 찾는데 사용 됨

  - 장점: 신호선의 수가 적어서 하드웨어가 간단
  - 단점: 우선순위가 낮은 장치들은 서비스를 받지 못하고 오랫동안 대기해야 함



소프트웨어 폴링 방식
  - 한 개의 TEST I/O선이 CPU와 모든 제어기들 사이에 연결 됨
  - 하드웨어가 간단
  - 검사를 위한 시간이 많이 걸림
