<캐시 메모리>



캐시 메모리(Cache Memory)
  - CPU와 주기억장치의 속도 차이로 인한 병목 현상을 완화하기 위해 사용
  - 프로그램에서 직접적으로 읽거나 쓸 수 없고, 하드웨어의 메모리 관리 시스템이 내부적으로 제어



캐시 적중(Cache hit)
  - 캐시 적중률 (hit ratio): H = 캐시에 적중되는 횟수 / 전체 기억장치 액세스 횟수
  - 캐시 적중 (hit): CPU가 데이터를 요청하여 캐시 메모리에 접근했을 때, 캐시 메모리가 해당 데이터를 가지고 있는 경우
  - 캐시 미스 (miss): CPU가 액세스하려는 데이터가 캐시에 없어서 주기억장치로부터 인출해 와야하는 상태



평균 기억장치 액세스 시간
  - T_a = H x T_c + (1 - H) x T_m
    (T_c: 캐시 액세스 시간, T_m: 주기억장치 액세스 시간)

    ex) T_c = 10ms, T_m = 100ns인 시스템에서 캐시 적중률이 70%, 95%, 99%인 경우,
        H = 70%, T_a = 0.7 x 10ns + 0.3 x 100ns = 37ns
        H = 95%, T_a = 0.95 x 10ns + 0.05 x 100ns = 14.5ns
        H = 99%, T_a = 0.99 x 10ns + 0.01 x 100ns = 10.9ns



지역성(Locality)
  - CPU가 주기억장치의 특정 위치에 저장되어 있는 명령어들이나 데이터를 빈번히 혹은 집중적으로 액세스 하는 현상
  - 어떤 데이터가 참조되면, 참조된 그 지역 및 시간 근처에서 다시 참조될 가능성이 높다는 원리



지역성의 분류
  - 시간적 지역성(Temporal locality): 최근에 접근했던 데이터들을 프로세서 가까이에 위치
  - 공간적 지역성(Spatial locality): 최근에 접근했던 데이터와 인접한 데이터들을 블록확
  - 순차적 지역성(Sequential locality): 분기(branch)가 발생하지 않는 한, 명령어들은 순서대로 실행



캐시 설계의 목표
  - 캐시 적중률의 극대화
  - 캐시 액세스 시간의 최소화
  - 캐시 실패에 따른 지연시간의 최소화
  - 주기억장치와 캐시간의 데이터 일관성 유지 및 그에 따른 오버헤드 최소화



캐시 인출 방식
  - 요구 인출(demand fetch) 방식: 캐시 미스가 발생한 경우에, CPU가 필요한 정보만 주기억장치로부터 캐시로 인출해오는 방식
  - 선인출(prefetch) 방식: CPU가 필요한 정보 외에도 그와 인접해 있는 정보들을 함께 캐시로 인출해 오는 방식
