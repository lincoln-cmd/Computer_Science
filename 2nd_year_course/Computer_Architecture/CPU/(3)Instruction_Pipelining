<명령어 파이프라이닝>


명령어 파이프라이닝(Instruction Pipelining)
    - 명령어 실행에 사용되는 하드웨어를 여러 단계로 분할함으로써 처리 속도를 높여주는 기술
    - 2-단계 명령어 파이프라인
    - 4-단계 명령어 파이프라인



2단계 명령어 파이프라인 시간 흐름

        명령어 -----> 인출단계 -----> 실행단계 -----> 실행 결과
                                 ↑
                               명령어

      클럭 주기|-------|-------|-------|-------|
                   1       2       3       4

      명령어1  |<----->|<----->|       |       |
                  인출    실행
      명령어2  |       |<----->|<----->|       |
                          인출    실행
      명령어3  |       |       |<----->|<----->|
                                  인출    실행

      명령어 하나의 실행 단계에서 다음 단계 명령어의 인출이 동시에 실행됨.
      위와같이 명령어가 3개일 때, 각 인출과 실행을 하나씩 수행하면 6주기가 필요하지만, 2단계 명령어 파이프라인이면 4주기면 끝남.
      단, 두 단계의 처리 시간(인출과 실행 시간)이 동일하지 않으면, 성능이 이론처럼 빠르지 않음.




4단계 명령어 파이프라인 시간 흐름

      명령어 -----> IF -----> ID -----> OF -----> EX -----> 실행 결과


      클럭 주기|-----|-----|-----|-----|-----|-----|-----|-----|-----|
                  1     2     3     4     5     6     7     8     9

      명령어1  |<--->|<--->|<--->|<--->|     |     |     |     |     |
                  IF    ID    OF    EX
      명령어2  |     |<--->|<--->|<--->|<--->|     |     |     |     |
                       IF    ID    OF    EX
      명령어3  |     |     |<--->|<--->|<--->|<--->|     |     |     |
                              IF    ID    OF    EX
      명령어4  |     |     |     |<--->|<--->|<--->|<--->|     |     |
                                   IF    ID    OF    EX
      명령어5  |     |     |     |     |<--->|<--->|<--->|<--->|     |
                                          IF    ID    OF    EX
      명령어6  |     |     |     |     |     |<--->|<--->|<--->|<--->|
                                                IF    ID    OF    EX

      IF: Instruction Fetch, 명령어 가져오기
      ID: Instruction Decord, 명령어 해석
      OF: Operand Fetch, 연산자(기억장치에 저장된 명령어 주소) 가져오기
      EX: Execution, 실행

      6개의 명령어를 각각 순차적으로 실행하면 24주기가 필요.
      4단계 명령어 파이프라인 실행하면, 이론상 9주기 필요.




슈퍼스칼라(Superscalar)
    - CPU 내에 여러개의 명령어 파이프라인들을 두어, 동시에 그 수만큼의 명령어들을 실행할 수 있도록 한 구조
    - 프로세스 내의 ALU를 여러개 포함시켜서 사이클 마다 한개 이상의 명령어가 동시에 실행되도록 하는 구조



VLIW(Very Large Instruction Word)
    - 여러 opcode 필드가 있는 긴 명령어 하나에 독립적인 연산 여러개를 정의하고 이들을 한꺼번에 내보내는 명령어 구조 집합의 종류
    - 슈퍼스칼라와의 차이: 인출과 해독은 하나의 회로에서 실행되고, 실행은 여러 ALU에서 수행



Pipeline Hazard
    - Structural hazard: 명령어 2개 이상이 동시에 프로세스 하드웨어에 요청을 할 때, 충돌이 일어나는 것
    - Data hazard: 두번째 명령어의 결과가 첫번째 명령어의 결과를 사용할 때 발생. RAW(Read After Write), WAR(Write After Read), WAW(Write After Write)로 나뉨
    - Control hazard: 프로세스가 분기 명령어를 만날 때, 나머지 명령어를 버리는 현상



듀얼-코어 및 멀티-코어
    - 성능 향상 방법
