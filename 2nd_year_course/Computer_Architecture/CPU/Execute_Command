<명령어 실행>

명령어 사이클(Instruction Cycle)
 - CPU가 한 개의 명령어를 실행하는 데 필요한 전체 처리 과정(CPU가 프로그램 실행을 시작한 순간부터 전원을 끄거나, 오류로 인해 중단될 때 까지 반복)
   - 인출(Fetch) 사이클(단계): CPU가 기억장치로부터 명령어를 읽어오는 단계
   - 실행(Execution) 사이클(단계): 인출된 명령어를 실행하는 단계


명령어 실행에 필요한 CPU 내부 레지스터
 - 프로그램 카운터(Program Counter:PC)
 - 누산기(Accumulater: AC): CPU 내에서 데이터를 일시적으로 저장하는 레지스터
 - 명령어 레지스터(Instruction Register: IR): 가장 최근에 인출된 명령어를 저장
 - 기억장치 주소 레지스터(Memory Address Register: MAR): 주소 버스와 연결. 프로그램 카운터에 저장된 명령어의 주소가 주소 버스로 출력되기 전에 일시적으로 저장되는 레지스터
 - 기억장치 버퍼 레지스터(Memory Buffer Register: MBR): 데이터 버스와 연결. 기억장치에 저장된 데이터와 읽어 올 데이터를 일시적으로 저장하는 레지스터


인출 사이클(Fetch cycle)
 - CPU가 기억장치의 지정된 위치로부터 명령어를 읽어오는 과정
 - 마이크로-연산(micro-operation): CPU 클럭의 각 주기 동안 수행되는 기본적인 동작
 - 인출 사이클 단계별 마이크로-연산
   - t0(첫번째 주기): MAR <- PC
   - t1(두번째 주기): MBR <- M[MAR], PC <- PC + 1
   - t2(세번재 주기): IR <- MBR


실행 사이클(Execution cycle)
 - CPU가 명령어를 해독(decode)하고, 그 결과에 따라 필요한 연산들을 수행하는 과정(마이크로-연산 존재)
 - CPU가 수행하는 연산들의 종류
   - 데이터 이동: CPU와 기억장치 혹은 CPU와 I/O device 간의 데이터 이동
   - 데이터 처리: 데이터를 이용해 산술/논리 연산 수행
   - 데이터 저장: 연산 결과 데이터나 입력장치로부터 읽어들인 데이터를 기억장치에 저장
   - 프로그램 제어: 프로그램 실행 순서를 결정하는 과정


실행 사이클 마이크로-연산 예시
 - LOAD addr (기억장치의 데이터를 CPU 내부의 AC로 이동)
   - t0: MAR <- IR(addr)
   - t1: MBR <- M[MAR]
   - t2: AC <- MBR

 - STA addr (기억장치에 저장)
   - t0: MAR <- IR(addr)
   - t1: MBR <- AC
   - t2: M[MAR] <- MBR

 - ADD addr (기억장치에 저장된 데이터를 AC의 내용과 더해서 다시 AC에 저장)
   - t0: MAR <- IR(addr)
   - t1: MBR <- M[MAR]
   - t2: AC <- AC + MBR


인터럽트 사이클(Interrupt cycle)
 - 인터럽트 요구가 들어왔는지 검사하고, 그 처리에 필요한 동작들을 수행하는 과정 (마이크로-연산 존재)
 - 인터럽트: 프로그램 실행 중에 CPU의 현재 처리 순서를 중단시키고 다른 동작을 수행하도록 요구하는 시스템 동작
 - 인터럽트 서비스 루틴(ISR): 인터럽트 요구를 처리해주기 위해 수행하는 프로그램 루틴

 - 인터럽트 처리 과정
   1. CPU에서 어떤 장치가 인터럽트를 요구했는지 확인
   2. 해당하는 ISR 호출
   3. 서비스 종료시 원래 수행하던 동작 수행

 - 인터럽트가 필요한 이유?
   - context의 보존&복구
   - 오류나 기계 결함 발생시 실행 중인 프로그램 상태를 보존 및 실행 재개
   - 처리 시간에 차이가 있는 작업을 인터럽트를 통해 비동기적으로 실행 가능(운영 효율의 향상)


간접 사이클(Indirect cycle)
 - 실행 사이클에서 사용될 데이터의 실제 주소를 기억장치로부터 읽어오는 과정(명령어에 포함되어있는 주소를 이용해서 명령어 실행에 필요한 데이터의 주소를 인출하는 과정) 
 - 간접 주소지정 방식에서 사용
 - 인출 사이클과 실행 사이클 사이에 위치(인출된 명령어의 주소 필드의 내용을 이용해서 기억장치로부터 데이터의 실재 주소를 인출해 IR의 주소필드에 저장하는 과정)




