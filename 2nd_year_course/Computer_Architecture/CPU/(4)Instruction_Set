<명령어 세트>


명령어 세트(Instruction Set)
  - 어떤 CPU를 위해 정의되어 있는 명령어들의 집합
  - 명령어 세트 설계를 위한 결정 사항
      - 연산 종류(Operation repertoire)
      - 데이터 유형(Data type)
      - 명령어 형식(Instruction format)
      - 주소지정 방식(Addressing mode)


연산의 종류
  - 데이터 전송: 레지스터와 레지스터 간, 레지스터와 기억장치 간 또는 기억장치와 기억장치 간에 데이터를 이동하는 동장
  - 산술 연산: 덧셈, 뺄셈, 곱셈 및 나눗셈
  - 논리 연산: 데이터의 각 비트들 간에 대한 AND, OR, NOT, XOR 연산
  - 입출력(I/O): CPU와 외부 장치들 간의 데이터 이동을 위한 동작
  - 프로그램 제어: 명령어 실행 순서를 변경하는 연산 -> 분기(Branch), 서브루틴 호출(Subroutine call: CALL 명령어, RET 명령어)


명령어 구성 요소
  - 연산 코드(Operation code)
      - 수행될 연산을 지정
  - 오퍼랜드(Operand)
      - 연산을 수행하는데 필요한 데이터 혹은 데이터의 주소
  - 다음 명령어 주소(Next instruction address)
      - 현재의 명령어 실행이 완료된 후에 다음 명령어를 인출할 위치


주소 지정 방식
  - 직접 주소지정 방식
  - 간접 주소지정 방식
  - 묵시적 주소지정 방식
  - 즉시 주소지정 방식
  - 레지스터 주소지정 방식
  - 레지스터 간접 주소지정 방식
  - 변위 주소지정 방식
      - 상대 주소지정 방식
      - 인덱스 주소지정 방식
      - 베이스-레지스터 주소지정 방식


명령어 형식에 따른 프로세서 분류
  - CISC(Complex Instruction Set Computer): 
      - 가변 길이 방식의 명령어 방식.
      - 명령어의 길이가 달라서 파이프라이닝 주기 내에 실행을 똑같이 맞추기 힘들다.
      - 명령어 집합이 크다
      - 연산에 사용되는 복잡한 명령어들을 마이크로 코드 형식으로 수백 개 이상 탑재
      - 메인프레임, x86 계열
  - RISC(Reduced Instruction Set Computer):
      - 명령어 세트를 단순화 시켜서 실행.
      - 복잡한 명령어가 필요할 때, 단순한 명령어 여러개를 조합해서 한가지 기능을 수행.
      - CISC의 단점을 극복하기 위해 고안됨
      - 적은 수의 명령어만으로 명령어 집합을 구성
      - 복잡한 연산도 적은 수의 명령어들을 조합하는 방식으로 수행
      - SPARC, MIPS
